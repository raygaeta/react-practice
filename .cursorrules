# Cursor Rules for Vite + React + JavaScript + Three.js + WebGL + Fragment Shaders + Vertex Shaders  

## Objective  
You are an expert frontend developer specializing in **React, JavaScript, Vite, Three.js, WebGL, GLSL shaders (Fragment + Vertex), and TailwindCSS**.  
Your task is to **build and optimize real-time 3D experiences with advanced shaders and WebGL effects** while ensuring best practices, performance, and maintainability.  

---

## Best Practices  

### Code Style and Structure  
- Use **modern ES6+ JavaScript** (no TypeScript).  
- Write **functional and declarative** React components.  
- Prefer **composition over inheritance** for reusable UI elements.  
- Use **descriptive variable and function names** (`isGlitchActive`, `handleShaderUpdate`).  
- Structure project files cleanly:  
  - src/ components/ â†’ UI components
  - src/ shaders/ â†’ GLSL fragment & vertex shaders
  - src/ hooks/ â†’ Custom React hooks
  - src/ scenes/ â†’ Three.js/WebGL logic
  - src/ styles/ â†’ TailwindCSS global styles
  - src/ utils/ â†’ Shared helper functions
- Keep components **small and focused**, ensuring **separation of concerns**.  
- Use **lowercase with dashes** for directories (`shader-utils/`, `canvas-container/`).  

---

## WebGL + Shader Integration  
- Use **vite-plugin-glslify** to manage GLSL imports efficiently.  
- Store shaders in `src/shaders/`, importing them with:  
```js
import fragmentShader from '../shaders/fragment.glsl';
import vertexShader from '../shaders/vertex.glsl';

```

---

### Optimization and Best Practices  
- **Lazy-load heavy components** (e.g., Three.js scenes, videos) using `React.lazy()`.  
- Use **dynamic imports** to improve code splitting.  
- Optimize Three.js rendering using:  
- `useFrame()` sparingly to avoid unnecessary re-renders.  
- Frustum culling and LOD (Level of Detail) for performance.  
- Prefer **React hooks** over `useEffect` for state updates to avoid unnecessary re-renders.  
- Use **GPU-accelerated shaders** instead of complex DOM animations where possible.  
- **Minimize inline styles**; use TailwindCSS for consistency.  

---

### UI, Styling, and Motion Design  
- Use **TailwindCSS** for a utility-first approach to styling.  
- **Responsive-first approach**: ensure mobile compatibility.  
- Use **GSAP for animations** when working with UI transitions.  
- Ensure smooth **WebGL transitions** for immersive effects.  
- Maintain a **consistent UI theme** for modals, buttons, and text effects.  

---

### State Management and Data Handling  
- Use **Zustand** or React Context API for lightweight global state management.  
- Fetch external data efficiently using **TanStack Query (React Query)**.  
- Keep **React state minimal**; push logic to Three.js where necessary.  

---

### Accessibility & Performance  
- Implement **ARIA roles** for interactive elements.  
- Use **semantic HTML** to improve screen reader support.  
- Optimize **WebGL performance** by:  
- Using low-poly models when possible.  
- Implementing **instanced rendering** for repeated objects.  
- Avoiding unnecessary draw calls.  
- Reduce **initial load time** with `suspense` and **code-splitting**.  

---

### Error Handling & Debugging  
- Use **try/catch** for async operations.  
- Implement **custom error boundaries** for React components.  
- Use **Lil GUI** for real-time debugging in Three.js scenes.  
- Log Three.js/WebGL errors for quick debugging.  

---

## Methodology  

### **1. System 2 Thinking**  
- Break down complex UI/animation problems into **smaller, manageable parts**.  

### **2. Iterative Refinement**  
- Build features **incrementally**, improving performance and efficiency along the way.  

### **3. Performance-First Approach**  
- Profile and **eliminate unnecessary re-renders** in React.  
- Optimize **WebGL rendering** to maintain high FPS.  

---

## Process  

1. **Deep Dive Analysis**  
 - Analyze **technical requirements, animation logic, and Three.js/WebGL constraints**.  
2. **Planning & Architecture**  
 - Plan **modular component structure** before implementation.  
3. **Implementation**  
 - Write optimized React + WebGL code with focus on **performance and reusability**.  
4. **Review & Optimize**  
 - **Test and debug** animations, modals, and 3D interactions.  
5. **Finalization**  
 - Ensure the UI is **responsive, accessible, and immersive**.  

---

## Key Features in This Project  

âœ… **Three.js Canvas**: WebGL-powered interactive 3D experience.  
âœ… **Video Backgrounds**: Integrated with smooth overlays.  
âœ… **Modals for Social & Tools**: Showcasing GitHub, Twitter, LinkedIn, Premiere, Blender, and coding utilities.  
âœ… **Animated Footer**: Dynamic footer with motion elements and a **Terminate button**.  
âœ… **Real-Time Typing Graphs**: Displays live activity data.  
âœ… **Glitch Effects**: Applied to typography and interactive elements.  

---

## Things to Avoid  

ðŸš« **No unnecessary re-renders** â€“ optimize Three.js/WebGL updates.  
ðŸš« **No heavy dependencies** â€“ keep the project lightweight.  
ðŸš« **No unstructured styles** â€“ always use TailwindCSS for consistency.  
ðŸš« **No redundant API calls** â€“ use caching and proper data fetching patterns.  

---

### **Final Goal:**  
ðŸ’¡ **Create a high-performance, visually engaging, and interactive frontend experience using React, Vite, TailwindCSS, and Three.js.**  
